@inherits Umbraco.Web.Mvc.UmbracoViewPage<IPublishedContent>                                                                                                 
@{
    var isHomePage = Model.Name == "home";
    IEnumerable<IPublishedContent> layout = Model.Ancestor(1).Siblings().Where(s => s.DocumentTypeAlias.Equals("layout", StringComparison.CurrentCultureIgnoreCase) && s.IsVisible());
    IEnumerable<IPublishedContent> headers = null;
    if (layout.Any())
    {
        headers = layout.First().Children(c => c.DocumentTypeAlias.Equals("header", StringComparison.CurrentCultureIgnoreCase) && c.IsVisible());
    }
}

@if (headers != null)
{
    var navigation = headers.First().Children(c => c.DocumentTypeAlias.Equals("navigation", StringComparison.CurrentCultureIgnoreCase) && c.IsVisible()).FirstOrDefault();
    var showOnRight = "";
    if (navigation != null)
    {
        var hasChildren = false;
        var relatedToName = "";
        foreach (var childPage in navigation.Children.Where("Visible"))
        {
            if (isHomePage && !(childPage.GetPropertyValue<bool>("homepagevisible")))
            {
                continue;
            }

            hasChildren = childPage.Children.Where("Visible").Any();
            showOnRight = (childPage.Children.Count() > 0 &&
                                childPage.Index() >= navigation.Children(c => c.Children.Count() > 0).Count())
                                            ? "class=right"
                                            : "";
    <li @showOnRight>
        @if (hasChildren)
        {
            <i></i>
        }
        @if (childPage.GetPropertyValue<bool>("underConstruction"))
        {
            <a href="/underconstruction" controller="">@childPage.Name</a>
        }
        else if (childPage.HasValue("relatedTo"))
        {
            relatedToName = Umbraco.TypedContent(childPage.GetPropertyValue<int>("relatedTo")).Url.Split('/').Reverse().ElementAt(1);
            <a href="@relatedToName" controller="@childPage.Name">@childPage.Name</a>
            
        }
        else
        {
            <a href="#" controller="@childPage.Name">@childPage.Name</a>
        }
        @if (childPage.Children.Count() > 0)
        {
            @childPages(childPage.Children)
        }
    </li>
        }
    }
}

@helper childPages(dynamic pages)
{
    var relatedToName = string.Empty;
    <ul>
        @foreach (IPublishedContent page in pages)
        {
            <li>
                @if (page.GetPropertyValue<bool>("underConstruction"))
                {
                    <a href="#" controller="/underconstruction">@page.Name</a>
                }
                else if (page.HasValue("relatedTo"))
                {
                    relatedToName = Umbraco.TypedContent(page.GetPropertyValue<int>("relatedTo")).Url.Split('/').Reverse().ElementAt(1);
                    <a href="@relatedToName" controller="@page.Name">@page.Name</a>
                    
                }
                else
                {
                    <a href="#" controller="@page.Name">@page.Name</a>
                }
                @if (page.Children.Count() > 0)
                {
                    @childPages(page.Children)
                }
            </li>
        }
    </ul>
}