@inherits Umbraco.Web.Mvc.UmbracoTemplatePage

@{
    var isHomePage = Model.Content.Parent.Name == "home" && Model.Content.Name == "index";
    var headers = Model.Content.AncestorOrSelf(1).Children(c => c.DocumentTypeAlias.Equals("header")).FirstOrDefault();
}
	
@* Ensure that the Current Page has children, where the property umbracoNaviHide is not True *@
@if (headers != null)
{
    //Navigations.First().Children.Where("Visible").Any()
    var navigation = headers.Children(c => c.DocumentTypeAlias == "navigation").FirstOrDefault();
    var showOnRight = "";
    if (navigation != null)
    {
        var hasChildren = false;
        var relatedToName = "";
        @* For each child page under the root node, where the property umbracoNaviHide is not True *@
        foreach (var childPage in navigation.Children.Where("Visible"))
        {
            if (isHomePage && !(childPage.GetPropertyValue<bool>("homepagevisible")))
            {
                continue;
            }

            hasChildren = childPage.Children.Where("Visible").Any();
            showOnRight = (childPage.Children.Count() > 0 &&
                                childPage.Index() + 1 >= navigation.Children(c => c.Children.Count() > 0).Count())
                                            ? "class=right"
                                            : "";
			<li @showOnRight>
                @if (hasChildren)
                {
                    <i></i>
                }
                @if (childPage.GetPropertyValue<string>("relatedTo") == "")
                {
                        <a href="#" controller="#">@childPage.Name</a>
                }
                else
                {
                    if (childPage.GetPropertyValue<string>("relatedTo") != "")
                    {
                        relatedToName = ApplicationContext.Current.Services.ContentService.GetById(childPage.GetPropertyValue<int>("relatedTo")).Name;
                    <a href="/@relatedToName/index" controller="@relatedToName">@childPage.Name</a>
                    }
                }
	            @* if the current page has any children, where the property umbracoNaviHide is not True *@
                @if (hasChildren)
                {
	                @* Call our helper to display the children *@
                        @childPages(childPage.Children, "/" + relatedToName);
                }
            </li>
        }
    }
}
	
@helper childPages(dynamic pages, string link)
{
    var hasChildren1 = false;
    <ul>
        @foreach (IPublishedContent page in pages)
        {
            hasChildren1 = page.Children.Any();
            <li>
                <a href="@link/@page.Name/index">@page.Name</a>

                @* if the current page has any children, where the property umbracoNaviHide is not True *@
                @if (hasChildren1)
                {                        
                    @* Call our helper to display the children *@
                    @childPages(page.Children, @link + "/" + @page.Name)
                }
            </li>
        }
    </ul>
}