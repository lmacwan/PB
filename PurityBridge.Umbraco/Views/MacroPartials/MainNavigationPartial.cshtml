@inherits Umbraco.Web.Mvc.UmbracoTemplatePage
@{
    var contentItems = uQuery.GetNodesByType("PageData").FirstOrDefault();
    dynamic home = null;
    if (contentItems != null)
    {
        home = Umbraco.Content(contentItems.Id);
    }
    var isHomePage = CurrentPage.DocumentType == "HomeData";
}

@if (home != null && home.Children.Any())
{
    @* Get the first page in the children *@
    var naviLevel = home.Children.First().Level;

    @* Add in level for a CSS hook *@
    <ul class="level-@naviLevel">
        @* For each child page under the home node *@

        @{
            var subPageChildren = (home as IPublishedContent).Children.Where(
                d => (d.ContentType.Alias.IndexOf("Data") == d.ContentType.Alias.LastIndexOf("Data"))
                    && d.GetPropertyValue<bool>("hideInHeader") == false 
                    && d.IsVisible() == true);
        }

        @foreach (var childPage in subPageChildren)
        {
            if (childPage.HasValue("childPages"))
            {
                <li class="@(childPage.IsAncestorOrSelf(Model.Content) ? "active" : null)" data-node-id="@childPage.Id">
                    <a href="@(childPage.GetPropertyValue<bool>("isNotClickable") ? "#" : childPage.Url)">
                        <i class="fa fa-plus"></i>
                        @childPage.Name
                    </a>
                    @{

                var childPagesValue = childPage.GetPropertyValue<string>("childPages");
                var pages = (childPagesValue as String).Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse);
                var pageCollection = Umbraco.TypedContent(pages).Where(x => x != null);

                    }
                    @renderChildPages(pageCollection)
                </li>
            }
            else
            {
                <li class="@(childPage.IsAncestorOrSelf(Model.Content) ? "active" : null)" data-node-id="@childPage.Id">
                    <a href="@childPage.Url">@childPage.Name</a>
                </li>
            }
        }
    </ul>
}

@helper renderChildPages(IEnumerable<IPublishedContent> pageCollection)
{
    @* Ensure that we have a collection of pages *@
    if (pageCollection.Any())
    {
        @* Get the first page in pages and get the level *@
        var naviLevel = pageCollection.First().Level;

        @* Add in level for a CSS hook *@
        <ul class="sublevel level-@(naviLevel)">

            @{
        var subPageChildren = pageCollection.Where(
            d => (d.ContentType.Alias.IndexOf("Data") == d.ContentType.Alias.LastIndexOf("Data"))
                && d.GetPropertyValue<bool>("hideInHeader") == false
                && d.IsVisible() == true);
            }

            @foreach (var page in subPageChildren)
            {
                if (page.HasValue("childPages"))
                {
                    <li data-node-id="@page.Id">
                        <a href="@(page.Url)">
                            <i class="fa fa-angle-right"></i>
                            @page.Name
                        </a>
                        @{
                    var childPagesValue = page.GetPropertyValue<string>("childPages");
                    var childPages = (childPagesValue as String).Split(new string[] { "," }, StringSplitOptions.RemoveEmptyEntries).Select(int.Parse);
                    var pages = (Umbraco.TypedContent(childPages) as IEnumerable<IPublishedContent>).Where(x => x != null);
                        }

                        @renderChildPages(pages)
                    </li>
                }
                else
                {
                    <li data-node-id="@page.Id">
                        <a href="@page.Url">@page.Name</a>
                    </li>
                }

            }
        </ul>
    }
}